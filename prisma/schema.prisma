// PRISMA CLIENT GENERATOR
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// PRISMA DATABASE SOURCE 
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// USER MODEL
model User {
  id                    String         @id
  username              String         @unique
  name                  String
  email                 String?        @unique
  password              String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  createdAt             DateTime       @default(now())
  sessions              Session[]
  post                  Post[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  bookmarks             Bookmark[]
  comments              Comment[]
  recievedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  @@map("users") // Table name of user model
}

// SESSION MODEL
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") // Table name of session model
}

// POST MODEL
model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  media               Media[]
  likes               Like[]
  bookmarks           Bookmark[]
  comments            Comment[]
  createdAt           DateTime       @default(now())
  linkedNotifications Notification[]

  @@map("posts") // Table name of posts model
}

// MEDIA MODEL
model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  createdAT DateTime  @default(now())

  @@map("post_media") // Table name of media model
}

// ENUM FOR MEDIA TYPE
enum MediaType {
  IMAGE
  VIDEO
}

// FOLLOW MODEL
model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  // id for the follow object will be created by mixing followerId and followingId
  @@unique([followerId, followingId])
  @@map("followers") // Table name of follow model
}

// LIKE MODEL
model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // id for the like object will be created by mixing userId and postId
  @@unique([userId, postId])
  @@map("likes") // Table name of like model
}

// BOOKMARK MODEL
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  // id for the like object will be created by mixing userId and postId
  @@unique([userId, postId])
  @@map("bookmarks") // Table name of bookmark model
}

// COMMENT MODEL
model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments") // Table name of comment model
}

// NOTIFICATION MODEL
model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications") // Table name of notification model
}

// NOTIFICATION TYPE
enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
